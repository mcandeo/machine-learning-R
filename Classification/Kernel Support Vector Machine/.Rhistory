setwd("~/Documents/MachineLearningCodes/Kernel Support Vector Machine")
#Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
#Spliting the dataset into training set and test set
library(caTools)
#Spliting the dataset into training set and test set
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
#Feature Scaling
training_set[, :-3] = scale(training_set[, :-3])
#Feature Scaling
training_set[, -3] = scale(training_set[, -3])
View(training_set)
View(training_set)
test_set[, -3] = scale(test_set[, -3])
#Kernel SVM model
library(e1071)
library(e1071)
classifier = svm(formula = Purchased ~.,
data = training_set,
type = 'C-classification',
kernel = 'radial basis')
library(e1071)
classifier = svm(formula = Purchased ~.,
data = training_set,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_set[-3])
compare = data.frame(Predicted = y_pred, Real = test_set$Purchased)
View(dataset)
View(compare)
#Making the confusion matrix
cm = table(test_set[-3], y_pred)
View(test_set)
View(compare)
#Making the confusion matrix
cm = table(test_set[,-3], y_pred)
#Making the confusion matrix
cm = table(test_set[, 3], y_pred)
#Making the confusion matrix
cm = table(test_set[, 3], y_pred)
#Visualizing the training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Kernel SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualizing the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'Kernel SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
